{"version":3,"sources":["components/Button.js","components/Display.js","components/AudioComp.js","components/Calculator.js","App.js","reportWebVitals.js","index.js"],"names":["Button","props","handleClick","bind","buttonDiv","React","createRef","focusOnKeypress","buttonBase","this","forClick","btnId","current","focus","className","bootStyles","timerId","setTimeout","clearTimeout","displaySymbol","bootPos","formulaValue","keysToHandle","id","role","value","onClick","ref","handleKeys","onKeyEvent","key","e","Component","Display","currentNumber","displayValue","formulaArray","priorResult","priorString","listItemClasses","map","val","index","AudioComp","audioContext","window","AudioContext","webkitAudioContext","compressor","createDynamicsCompressor","connect","destination","prevProps","lastButton","processButton","close","button","osc","createOscillator","frequency","noteStringToFrequency","noteString","type","gainNode","createGain","gain","exponentialRampToValueAtTime","currentTime","start","stop","string","noteValues","Calculator","startingState","buttonsMap","category","state","handleNumeral","handleOperator","handleAction","handleEquals","clickedButton","find","butt","setState","length","fullFormulaArray","opFilteredArray","reduce","acc","curr","i","arr","lastI","convertedCurr","Number","trimmedAcc","slice","console","log","filteredForString","answer","Function","RegExp","test","App","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cf846d4f.chunk.js","sourcesContent":["import React from 'react';\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\n\nclass Button extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n    this.buttonDiv = React.createRef();\n    this.focusOnKeypress = this.focusOnKeypress.bind(this);\n    this.buttonBase = `btn btn-lg w-100 py-1 fs-1`;\n  }\n\n  handleClick() {\n    this.props.forClick(this.props.btnId)\n  }\n\n  focusOnKeypress() {\n    this.buttonDiv.current.focus();\n    //briefly give the current button the \"active\" class and then remove it on a timer\n    //to simulate hover/focus for keypress\n    this.buttonDiv.current.className = `${this.buttonBase} ${this.props.bootStyles} active`;\n    const styleTimer = () => {\n      setTimeout( () => {\n        this.buttonDiv.current.className = `${this.buttonBase} ${this.props.bootStyles}`;\n      }, 100);\n    }\n    const timerId = styleTimer();\n    return () => {\n      clearTimeout(timerId);\n    }\n  }\n\n  render() {\n    const { btnId, displaySymbol, bootStyles, bootPos, formulaValue } = this.props;\n    const keysToHandle = (formulaValue === \"=\")\n                          ?  [formulaValue, \"enter\"]\n                          : [formulaValue];\n    return (\n      <div className={`outer-button-div col \n                      ${bootPos}`}>\n        <div\n        className={`${this.buttonBase} ${bootStyles}`}\n        id={btnId}\n        role=\"button\"\n        value={displaySymbol}\n        onClick={this.handleClick}\n        ref={this.buttonDiv}      \n          > \n        <KeyboardEventHandler\n          handleKeys={keysToHandle}\n          // handleFocusableElements={true}\n          onKeyEvent={(key, e) => {            \n            // console.log(`simulate focus and handleClick upon keydown event of ${key}`);\n            this.focusOnKeypress();\n            this.handleClick();\n          }} />\n        {displaySymbol}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Button;","import React from 'react';\n\nconst Display = ({ currentNumber, displayValue, formulaArray, priorResult, priorString}) => {\n  const listItemClasses = `list-inline-item text-wrap text-break\"`;\n\n  return (\n    <div className=\"text-end border px-3 mx-2 row\" >\n        <ul className=\"list-inline col-12 fs-4\">\n          {/* placeholder 0 for initialState: */}\n          {\n            (currentNumber === \"\" && priorString === \"\" && displayValue === '0') &&\n            <li className={`${listItemClasses} text-danger`} key=\"initialState\">0</li>\n          }\n          {/* render the formulaArray as an inline list: */}\n          {formulaArray.map((val, index) => {\n              if (typeof val === \"string\" | typeof val === \"number\") {\n                return <li className={`${listItemClasses} text-danger`} key={index}>{val}</li>;\n              } else {\n                return <li className={`${listItemClasses} text-secondary`} key={index}>{val.displaySymbol}</li>;\n              }\n            })\n          }\n          {/* render currentNumber at the end of the formulaArray list so the entire formula to be evaluated is on a single line: */}\n          {(currentNumber !== \"\") &&\n            <li \n              key=\"itsAlwaysTheCurrentNumber01\"\n              className={`${listItemClasses} text-danger`}>\n              {currentNumber}\n            </li>\n          }\n          {/* if there's a priorResult (that hasn't been acted upon yet), render it here */}\n          {(priorResult) &&\n            <li \n            key=\"priorResultIfAny\"\n            className={`${listItemClasses} text-success`}>\n             { `${priorString} = ${priorResult}` }\n            </li>\n          }\n        </ul>\n\n      {/* \"Main\" display, emulating traditional calculator display, showing either the most recent operator\n         or the currentNumber as it's being built, relayed through displayValue in props  */}  \n      <div className=\"text-primary text-wrap col-12 text-break display-5\" id=\"display\">\n        {displayValue}\n      </div>\n    </div>\n  )\n}\n\nexport default Display;","import React from 'react';\nimport {noteValues} from '../noteValues.json';\n// import {GuitarFuzz} from '../waveTables.json';\n\nclass AudioComp extends React.Component {\n\n// credit to MDN Documentation for AudioContext training: https://developer.mozilla.org/en-US/docs/Web/API/AudioContext \n\n// credit to Joe Sullivan of http://joesul.li/van/react-and-web-audio/ for a helpful React implementation example, \n// which uses Redux rather than default React state (plus some now-unsafe lifecycle methods), and which would be much more efficient,\n// but I undertook this exercise to practice state without Redux.\n\n// credit to https://marcgg.com/blog/2016/11/01/javascript-audio/ for the note frequencies hash saved in noteValues\n\nconstructor({props}) {\n  super(props);\n}\n\ncomponentDidMount() {\n  //create base AudioContext\n  this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n\n  //create base compressor\n  this.compressor = this.audioContext.createDynamicsCompressor();\n\n  // oscillator + gain node will connect to compressor inside processButton\n  // because with multiple presses there will be multiple oscillators running at a time  \n\n  // connect compressor to audioContext destination\n  this.compressor.connect(this.audioContext.destination);\n  // supply the newly-minted DynamicsCompressorNode with values\n  // cribbed directly from MDN https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode\n  // (decided not to use)\n  // compressor.threshold.setValueAtTime(-50, this.audioContext.currentTime);\n  // compressor.knee.setValueAtTime(40, this.audioContext.currentTime);\n  // compressor.ratio.setValueAtTime(12, this.audioContext.currentTime);\n  // compressor.attack.setValueAtTime(0, this.audioContext.currentTime);\n  // compressor.release.setValueAtTime(0.25, this.audioContext.currentTime);\n\n}\n\ncomponentDidUpdate(prevProps) {\n  if (this.props.lastButton !== prevProps && this.props.lastButton !== '') {\n    this.processButton(this.props.lastButton);\n  }\n  \n}\n\ncomponentWillUnmount() {\n  this.audioContext.close();\n}\n\nprocessButton(button){\n  //create oscillator from the base audioContext (created in componentDidMount)\n  let osc = this.audioContext.createOscillator();\n\n  //assign frequency and type (stored in button.audioNum) to oscillator\n  osc.frequency.value = this.noteStringToFrequency(button.noteString);\n  osc.type = 'sine';\n  \n  // fun with custom wave-tables / periodic waves, declined to use in production\n  // let guitarTable = this.audioContext.createPeriodicWave(GuitarFuzz.real, GuitarFuzz.imag);\n  // console.log(popTable);\n  // osc.setPeriodicWave(guitarTable);  \n  \n  // create GainNode from the base audioContext\n  let gainNode = this.audioContext.createGain();\n\n  //set sound duration & set gain to gracefully die with an exponential or linear ramp \n  const soundDuration = 1.8;\n  gainNode.gain.exponentialRampToValueAtTime(0.0001, this.audioContext.currentTime + soundDuration);\n\n  //connect (local) oscillator to (local) gainNode\n  osc.connect(gainNode);\n\n  //connect (local)  gainNode to base compressor\n  gainNode.connect(this.compressor);\n\n  //actually play oscillator sound\n  osc.start(this.audioContext.currentTime);\n\n  // so the full audioContext connect path is:\n  // this.audioContext -> processButton.oscillator -> processButton.gainNode -> this.compressor -> this.audioContext.destination\n\n  //actually stop sound after duration (replacing sloppy setTimeout method below)\n  osc.stop(this.audioContext.currentTime + soundDuration);\n  \n\n  //simple, sloppy timer to stop button sound after given interval\n  // const soundTimer = () => {\n  //   setTimeout( () => {\n  //     osc.stop(this.audioContext.currentTime);\n  //   }, 10000);\n  // }\n  // const timerId = soundTimer();\n  // return () => {\n  //   clearTimeout(timerId);\n  // }\n}\n\nnoteStringToFrequency(string) {\n  // map human-accessible note-decriptor in button.noteString to its frequency from noteValues.json\n\n  return noteValues[string];\n}\n\nrender() {\n  return null;\n}\n\n\n}\n\n\nexport default AudioComp;","// import { findAllByDisplayValue } from '@testing-library/react';\nimport React from 'react';\nimport Button from './Button';\nimport Display from './Display';\nimport AudioComp from './AudioComp';\n\nclass Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentNumber: '',\n      displayValue: '0',\n      formulaArray: [],\n      priorResult: '',\n      priorString: '',\n      lastButton: '',\n    }\n    this.forClick = this.forClick.bind(this);\n    this.handleNumeral = this.handleNumeral.bind(this);\n    this.handleOperator = this.handleOperator.bind(this);\n    this.handleAction = this.handleAction.bind(this);\n    this.handleEquals = this.handleEquals.bind(this);\n\n  }\n\n  startingState = {\n    currentNumber: '',\n    displayValue: '0',\n    formulaArray: [],\n    priorResult: '',\n    priorString: '',\n    lastButton: '',\n  }\n\n  buttonsMap = [\n    {\n      id: \"seven\",\n      displaySymbol: \"7\",\n      formulaValue: \"7\",\n      category: \"numeral\",\n      bootStyles: \"btn-outline-primary col\",\n      bootPos: \"order-2 col-4\",\n      noteString: 'C4',\n\n    },\n    {\n      id: \"eight\",\n      displaySymbol: \"8\",\n      formulaValue: \"8\",\n      category: \"numeral\",\n      bootStyles: \"btn-outline-primary col\",\n      bootPos: \"order-2 col-4\",\n      noteString: 'C#4',\n\n    },\n    {\n      id: \"nine\",\n      displaySymbol: \"9\",\n      formulaValue: \"9\",\n      category: \"numeral\",\n      bootStyles: \"btn-outline-primary col\",\n      bootPos: \"order-2 col-4\",\n      noteString: 'D4',\n\n    },\n    {\n      id: \"four\",\n      displaySymbol: \"4\",\n      formulaValue: \"4\",\n      category: \"numeral\",\n      bootStyles: \"btn-outline-primary col\",\n      bootPos: \"order-2 col-4\",\n      noteString: 'D5',\n\n    },\n    {\n      id: \"five\",\n      displaySymbol: \"5\",\n      formulaValue: \"5\",\n      category: \"numeral\",\n      bootStyles: \"btn-outline-primary col\",\n      bootPos: \"order-2 col-4\",\n      noteString: 'D#4',\n\n    },\n    {\n      id: \"six\",\n      displaySymbol: \"6\",\n      formulaValue: \"6\",\n      category: \"numeral\",\n      bootStyles: \"btn-outline-primary col\",\n      bootPos: \"order-2 col-4\",\n      noteString: 'E4',\n\n    },\n    {\n      id: \"one\",\n      displaySymbol: \"1\",\n      formulaValue: \"1\",\n      category: \"numeral\",\n      bootStyles: \"btn-outline-primary\",\n      bootPos: \"order-2 col-4\",\n      noteString: 'E5',\n\n    },\n    {\n      id: \"two\",\n      displaySymbol: \"2\",\n      formulaValue: \"2\",\n      category: \"numeral\",\n      bootStyles: \"btn-outline-primary\",\n      bootPos: \"order-2 col-4\",\n      noteString: 'F4',\n\n    },\n    {\n      id: \"three\",\n      displaySymbol: \"3\",\n      formulaValue: \"3\",\n      category: \"numeral\",\n      bootStyles: \"btn-outline-primary\",\n      bootPos: \"order-2 col-4\",\n      noteString: 'F#4',\n\n    },\n    {\n      id: \"zero\",\n      displaySymbol: \"0\",\n      formulaValue: \"0\",\n      category: \"numeral\",\n      bootStyles: \"btn-outline-primary\",\n      bootPos: \"order-2 col-6\",\n      noteString: 'G4',\n    },\n    {\n      id: \"decimal\",\n      displaySymbol: \".\",\n      formulaValue: \".\",\n      category: \"action\",\n      bootStyles: \"btn-outline-secondary\",\n      bootPos: \"order-3 col-2\",\n      noteString: 'G5',\n\n    },\n    {\n      id: \"add\",\n      displaySymbol: \"+\",\n      formulaValue: \"+\",\n      category: \"operator\",\n      bootStyles: \"btn-outline-secondary\",\n      bootPos: \"col-6\",\n      noteString: 'G#3',\n\n    },\n    {\n      id: \"subtract\",\n      displaySymbol: \"-\",\n      formulaValue: \"-\",\n      category: \"operator\",\n      bootStyles: \"btn-outline-secondary\",\n      bootPos: \"col-6\",\n      noteString: 'A3',\n\n    },\n    {\n      id: \"multiply\",\n      displaySymbol: \"x\",\n      formulaValue: \"*\",\n      category: \"operator\",\n      bootStyles: \"btn-outline-secondary\",\n      bootPos: \"col-6\",\n      noteString: 'A4',\n\n    },\n    {\n      id: \"divide\",\n      displaySymbol: \"÷\",\n      formulaValue: \"/\",\n      category: \"operator\",\n      bootStyles: \"btn-outline-secondary\",\n      bootPos: \"col-6\",\n      noteString: 'A#3',\n\n    },\n    \n    {\n      id: \"equals\",\n      displaySymbol: \"=\",\n      formulaValue: \"=\",\n      category: \"action\",\n      bootStyles: \"btn-secondary\",\n      bootPos: \"col-4 order-last\",\n      noteString: 'C4',\n    },\n    {\n      id: \"clear\",\n      displaySymbol: \"C\",\n      formulaValue: \"c\",\n      category: \"action\",\n      bootStyles: \"btn-warning\",\n      bootPos: \"order-first col-12\",\n      noteString: 'B3',\n    }\n  ];\n\n  forClick(btnId){\n    let clickedButton = this.buttonsMap.find(butt => butt.id === btnId);\n    this.setState({\n      lastButton: clickedButton\n    })\n    switch (clickedButton.category) {\n      case \"numeral\":\n        this.handleNumeral(clickedButton);\n        break;\n      case \"operator\":\n        this.handleOperator(clickedButton);\n        break;\n      case \"action\":\n        this.handleAction(clickedButton)\n      default:\n        break;\n    }\n  }\n\n  handleNumeral(clickedButton){\n    // if state.formulaArray is empty (no values entered yet) and state.priorResult is not an empty string, then the user has declined to operate on a stored priorResult, so clear priorResult and priorString out\n    if (this.state.formulaArray.length === 0 && this.state.priorResult !== '') {\n      this.setState({\n        priorResult: '',\n        priorString: ''\n      })\n    }\n    // prevent adding extra zeros \"at start of number\", i.e., when currentNumber is 0 or empty\n    if (this.state.currentNumber === '0' | this.state.currentNumber === '') {\n      this.setState(\n        {\n          currentNumber: clickedButton.formulaValue,\n          displayValue: clickedButton.formulaValue,\n        }\n      );\n    } else {\n      this.setState(\n        {\n          currentNumber: this.state.currentNumber + clickedButton.formulaValue,\n          displayValue: this.state.currentNumber + clickedButton.formulaValue,\n        }\n      );\n    }\n  }\n\n  handleOperator(clickedButton){\n    // if state.formulaArray is empty (no values entered yet) and currentNumber is still empty, we are at the start of a new operation\n    if (this.state.formulaArray.length === 0 && this.state.currentNumber === '') {\n\n      // IF there's no priorResult, by pressing an operand first, the user is choosing to act on the initial startingDisplay of 0: push \"0\" followed by operand object to formulaArray\n      if (this.state.priorResult === '') {\n        this.setState({\n          displayValue: clickedButton.displaySymbol,\n          formulaArray: [\"0\", clickedButton],\n        });\n      }\n      \n      //ELSE IF state.priorResult is not an empty string, user has chosen to act on a prior result per \n      // User Story #14: Pressing an operator immediately following = should start a new calculation that operates on the result of the previous evaluation.\n      // move priorResult into the formula array followed by this operator, and clear out state.priorResult and priorString\n      else if (this.state.priorResult !== '') {\n        this.setState({\n          displayValue: clickedButton.displaySymbol,\n          formulaArray: [this.state.priorResult, clickedButton],\n          priorResult: '',\n          priorString: ''\n        })\n      }\n    } \n    // ELSE this is not the start of the formula array, and/or user has already started building a currentNumber. Carry on.\n    else {\n      // IF the currentNumber is empty (string value '') just push the operator object\n      if (this.state.currentNumber === '') {\n        this.setState({\n          displayValue: clickedButton.displaySymbol,\n          formulaArray: [...this.state.formulaArray, clickedButton],\n        });\n      } \n      // ELSE the currentNumber has been built to some extent, and this operand signals the end of currentNumber-- currentNumber needs to be pushed to the formulaArray as a string (for later processing when equals is pressed); \n      //followed by pushing the operator itself to formulaArray\n      else {\n        this.setState({\n          displayValue: clickedButton.displaySymbol,\n          formulaArray: [...this.state.formulaArray, this.state.currentNumber, clickedButton],\n        });\n        // also set currentNumber back to base '' (empty)\n        this.setState({\n          currentNumber: '',\n        });\n      }\n    }\n  }\n\n  handleEquals() {\n    //User Story #9: In any order, I should be able to add, subtract, multiply and divide a chain of numbers of any length, and when I hit =, the correct result should be shown in the element with the id of display.\n    \n    //at the time equals is triggered, formulaArray is an array of numbers and operands.\n\n    // move final currentNumber to a fullFormulaArray (slightly modified this.state.formulaArray to avoid setting state early)\n    // n.b. if final currentValue is empty, supply \"0\" to avoid evaluation errors at the end\n    let fullFormulaArray = (this.state.currentNumber === '')\n                            ? [...this.state.formulaArray, \"0\"]\n                            : [...this.state.formulaArray, this.state.currentNumber];\n    // console.log(\"fullFormulaArray:\");\n    // console.log(fullFormulaArray);\n\n    //reduce/filter through the formula array and remove any surplus consecutive operations per\n    // User Story #13: If 2 or more operators are entered consecutively, the operation performed should be the last operator entered\n    // (excluding the negative (-) sign). For example, if 5 + * 7 = is entered, the result should be 35 (i.e. 5 * 7); if 5 * - 5 = is entered, the result should be -25 (i.e. 5 x (-5)).\n    let opFilteredArray = [...fullFormulaArray].reduce(\n      (acc, curr, i, arr) => {\n        // console.log(`at the top of loop ${i}, acc is:`);\n        // console.log(acc);\n\n        //snag last index of accululator so .length isn't called repeatedly\n        let lastI = 0;\n        if (i > 0) {\n          // console.log(`opFilteredArray recuder thinks i is now ${i}`);\n          // console.log(`opFilteredArray recuder thinks acc is now:`);\n          // console.log(acc);\n          lastI = (acc.length - 1);\n        }\n        // console.log(`prior to processing loop ${i}, lastI is ${lastI}`);\n        \n        //if a number is in the formulaArray, most likely from a prior answer (or a javascript equivalency I missed), pass it into the accumulating array\n        if (typeof curr === \"number\") {\n          return [...acc, curr];\n        }\n        // if current value is a string, it's a string of a stored number from currentValue, so covert it to a number and add it to the accumulated array\n        else if (typeof curr === \"string\") {\n          let convertedCurr = Number(curr);\n          return [...acc, convertedCurr];\n        } \n        // handle objects, which will all be operands\n        else if (typeof curr == \"object\") {\n          // if this operand is the final item in the original array, ignore it-- it wouldn't be acting on anything\n          if (i === arr.length - 1) {\n            return [...acc];\n          }\n\n          // check if the prior value on the accumulator is also an operator\n          if (typeof acc[lastI] === \"object\" ) {\n            //if so, check if this current value is supposed to be a negative sign by seeing if the next value (referencing the original array) is a string/stored-currentNumber AND whether this current sign is a subtract/minus sign\n            if (curr.id === \"subtract\" && typeof arr[ i + 1] === \"string\") {\n              // if the next value is a string/number and the current value is a subtract, then return the array with both operators intact.\n              // i.e. +-7   or --5  or *-2\n              return [...acc, curr];\n            } else {\n              // else these are part of an invalid sequence of operands, so only keep the most recent\n              // ie +* or /+ or -/\n              let trimmedAcc = acc.slice(0, lastI);\n                return [...trimmedAcc, curr] \n              // MAJOR NOTE: this method fails to account for stacking negatives, \n              // ie. 5---7 = -2 but here it would resolve to 5--return 12\n\n              //Implement Recursive Solution to \n              //test case 1: 5 + - 2\n              //test case 2: 7 + - 3\n              //test case 3: 10 * - - 3\n              //test case 4: 13 - - * + - * - + - 6\n              //test case 5: 13 - + * + - 6\n              // text case 6: 10 +---*--- 3\n              // text case 7: 10 ---*--- 3\n            }\n          } else {\n            // else the prior value isn't an operator, so just tack this current operator onto the accumulator\n            return [...acc, curr]; \n          }\n        } else {              \n          console.log(`We're ignoring this value in opFilteredArray, which isn't a string, number, or object: ${curr}`);\n          return [...acc];\n        }\n      }, []\n    );\n    \n    // opFilteredArray is now only Numbers and objects representing valid operands \n    // console.log(\"opFilteredArray:\");\n    // console.log(opFilteredArray);\n\n    // reduce the opFilteredArray into a single string so we can evaluate it all at once later\n    let filteredForString = [...opFilteredArray].reduce(\n      ( acc, curr ) => {\n        switch (typeof curr) {\n          case \"number\": {\n            return `${acc} ${curr}`;\n          }\n          case \"object\": {\n            return `${acc} ${curr.formulaValue}`;\n          }\n          default:\n            throw \"unexpected element in opFilteredArray\";\n            break; \n        }\n      }, ''\n    );\n\n    // stringParse is a function to return the result of an inner function that returns (and therefore evaluates) the input string\n    // i.e., we're relying on javascript to evaluate the entire set of calculator arguments at once per\n    //User Story #14: Pressing an operator immediately following = should start a new calculation that operates on the result of the previous evaluation.\n\n    function stringParse(string){\n      return Function(`'use strict'; return (${string})`)();\n    }    \n\n    // that evaluation is the final answer, so supply it to state's display, store answer in priorAnswer, save the filteredForString in priorString  and reset rest of state\n    let answer = stringParse(filteredForString);\n\n    this.setState({\n      currentNumber: '',\n      displayValue: `${answer}`,\n      formulaArray: [],\n      priorResult: `${answer}`,\n      priorString: filteredForString,\n    });\n  }\n\n  handleAction(clickedButton){\n    switch (clickedButton.id) {\n      case \"decimal\": {\n        // if the current number is empty (at start), supply a zero followed by a decimal\n        if (this.state.currentNumber === '') {\n          this.setState({\n            currentNumber: '0.',\n            displayValue: '0.'\n          });\n          break;\n        } else {\n          // check that no other decimals exist in the current value. If there are, break without changing anything.\n          let regex = new RegExp(/\\./, 'i')\n          if (regex.test(this.state.currentNumber)) {\n            // console.log(\"regex test for decimal triggered\");\n            return undefined;\n            break;\n          } else {\n            // otherwise, you're in the middle of an as-of-yet undecimaled number, so tag on that decimal, champ!\n            this.setState({\n              currentNumber: this.state.currentNumber + clickedButton.formulaValue,\n              displayValue: this.state.currentNumber + clickedButton.formulaValue,\n            });\n            break;\n          }\n        }\n      }\n      case \"clear\": {\n        //User story #7: At any time, pressing the clear button clears the input and output values, and returns the calculator to its initialized state; 0 should be shown in the element with the id of display.\n        this.setState(this.startingState);\n        break;\n      }\n      case \"equals\": {\n        this.handleEquals();\n        break;\n      }\n      default:\n        throw `unexpected actionHandled for ${clickedButton.id}`;\n        break;\n    } \n  }\n\n  render() {\n\n    return (\n      <div className=\"calc-container\">\n        <AudioComp lastButton={this.state.lastButton}/>\n        <Display \n          currentNumber={this.state.currentNumber}\n          displayValue={this.state.displayValue}\n          formulaArray={this.state.formulaArray}\n          priorResult={this.state.priorResult}\n          priorString={this.state.priorString}\n          />\n          <div className=\"row row-cols-4 g-1 mx-2 my-2 justify-content-md-center\">\n            {this.buttonsMap.map(butt => {\n              return (\n                <Button \n                  btnId={butt.id}\n                  key={butt.id} \n                  displaySymbol={butt.displaySymbol} \n                  forClick={this.forClick}\n                  bootStyles={butt.bootStyles}\n                  bootPos={butt.bootPos}\n                  formulaValue={butt.formulaValue}\n              />\n              )\n            })\n            }\n          </div>        \n\n      </div>\n    )\n  }\n}\n\nexport default Calculator;","import './App.css';\nimport Calculator from './components/Calculator';\n// import ReactFCCtest from 'react-fcctest';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App container-sm\" >\n      <header className=\"App-header\">\n          <h1 className=\"display-6\">Singing Calculator</h1>\n      </header>\n      <Calculator />\n      {/* <ReactFCCtest /> */}\n      <p>Uses React, Bootstrap 5, and the Web Audio API to create oscillator effects on the fly.</p>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"../src/main.scss\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}